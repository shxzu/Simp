package cc.simp.modules.impl.exploit;

import cc.simp.event.impl.packet.PacketReceiveEvent;
import cc.simp.event.impl.packet.PacketSendEvent;
import cc.simp.event.impl.player.PreUpdateEvent;
import cc.simp.modules.Module;
import cc.simp.modules.ModuleCategory;
import cc.simp.modules.ModuleInfo;
import cc.simp.property.impl.EnumProperty;
import io.github.nevalackin.homoBus.Listener;
import io.github.nevalackin.homoBus.annotations.EventLink;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.potion.Potion;

import static cc.simp.utils.Util.mc;

@ModuleInfo(label = "Anti-Cheat Disabler", category = ModuleCategory.EXPLOIT)
public class AntiCheatDisablerModule extends Module {

    public EnumProperty<Mode> modeProperty = new EnumProperty<>("Mode", Mode.HYPIXELINV);

    private enum Mode {
        HYPIXELINV,
        C0B
    }

    public AntiCheatDisablerModule() {
        setSuffixListener(modeProperty);
    }

    private boolean sentFirstOpen = false;
    private boolean failedClientStatus = false;
    private boolean failedCloseWindow = false;

    @EventLink
    private final Listener<PreUpdateEvent> preUpdateEventListener = event -> {
        if (modeProperty.getValue() == Mode.HYPIXELINV) {
            this.failedClientStatus = false;
            this.failedCloseWindow = false;
            if (mc.currentScreen instanceof GuiInventory) {
                if (!this.sentFirstOpen) {
                    mc.getNetHandler().sendSilentPacket(new C0DPacketCloseWindow());
                    this.sentFirstOpen = true;
                }
                final int safePacketTick = mc.thePlayer.isPotionActive(Potion.moveSpeed) ? 3 : 4;
                if (mc.thePlayer.ticksExisted % safePacketTick == 0) {
                    mc.getNetHandler().sendSilentPacket(new C0DPacketCloseWindow());
                }
                else if (mc.thePlayer.ticksExisted % safePacketTick == 1) {
                    mc.getNetHandler().sendSilentPacket(new C16PacketClientStatus(C16PacketClientStatus.EnumState.OPEN_INVENTORY_ACHIEVEMENT));
                }
            }
            else {
                this.sentFirstOpen = false;
            }
        }
    };

    @EventLink
    private final Listener<PacketSendEvent> packetSendEventListener = event -> {
        if (modeProperty.getValue() == Mode.C0B) {
            if(event.getPacket() instanceof C0BPacketEntityAction) {
                event.setCancelled();
            }
        }
    };

    @EventLink
    private final Listener<PacketReceiveEvent> packetReceiveEventListener = event -> {
        if (modeProperty.getValue() == Mode.HYPIXELINV) {
            if (event.getPacket() instanceof C16PacketClientStatus) {
                if (this.failedClientStatus) {
                    event.setCancelled();
                }
                this.failedClientStatus = true;
            }
            if (event.getPacket() instanceof C0DPacketCloseWindow) {
                if (this.failedCloseWindow) {
                    event.setCancelled();
                }
                this.failedCloseWindow = true;
            }
        }
    };

    @Override
    public void onDisable() {
        this.sentFirstOpen = false;
        this.failedClientStatus = false;
        this.failedCloseWindow = false;
        super.onDisable();
    }
}